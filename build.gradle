apply plugin: 'java'

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.streamlio.pulsar'
archivesBaseName = 'pulsar-java-tutorial'
version = '0.0.1'

def urlFile = { url, name ->
    File file = new File("$buildDir/download/${name}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut ->
                fileOut << downloadStream
            }
        }
    }
    files(file.absolutePath)
}

dependencies {
    compile urlFile('https://github.com/streamlio/incubator-pulsar/releases/download/v2.0.0-streamlio-12/pulsar-client-2.0.0-streamlio-12.jar', 'pulsar-client')
    compile urlFile('https://github.com/streamlio/incubator-pulsar/releases/download/v2.0.0-streamlio-12/pulsar-client-kafka-2.0.0-streamlio-12.jar', 'pulsar-client-kafka')
    compile group: 'com.esotericsoftware',     name: 'kryo',                version: '4.0.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl',    version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core',          version: '2.8.2'
}

jar {
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task("producerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.ProducerTutorial'
  classpath = sourceSets.main.runtimeClasspath
}

task("consumerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.ConsumerTutorial'
  classpath = sourceSets.main.runtimeClasspath
}

task("readerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.ReaderTutorial'
  classpath = sourceSets.main.runtimeClasspath
}

task("asyncProducerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.async.AsyncProducerTutorial'
  classpath = sourceSets.main.runtimeClasspath
}

task("asyncConsumerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.async.AsyncConsumerTutorial'
  classpath = sourceSets.main.runtimeClasspath
}

task("kafkaConsumerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.kafka.KafkaAdaptorConsumer'
  args = ['topic']
  classpath = sourceSets.main.runtimeClasspath
}

task("kafkaProducerTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.kafka.KafkaAdaptorProducer'
  args = ['topic']
  classpath = sourceSets.main.runtimeClasspath
}

task("producerStatsTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.stats.ProducerStatsTutorial'
  classpath = sourceSets.main.runtimeClasspath
}

task("consumerStatsTutorial", dependsOn: 'classes', type: JavaExec) {
  main = 'tutorial.stats.ConsumerStatsTutorial'
  args = ['topic']
  classpath = sourceSets.main.runtimeClasspath
}